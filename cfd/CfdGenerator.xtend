/*
 * generated by Xtext
 */
package org.xtext.testing.cfd.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.xtext.testing.cfd.cfd.TestCase
import java.util.HashMap
import org.xtext.testing.cfd.cfd.Flow
import org.xtext.testing.cfd.cfd.EquiValenceClass

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class CfdGenerator implements IGenerator {
	private HashMap<String, String> rowData = new HashMap<String, String>();

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for (testCase : resource.allContents.filter(typeof(TestCase)).toIterable) {
			fsa.generateFile(testCase.name + ".txt", compileTestCase(testCase));
		}

	}

	def compileTestCase(TestCase testCase) '''
		TetCase:«testCase.caption»
		Flows:
		«InitilizeRowData(testCase)»
		«SetTitleToRowData(testCase)»
		«GetRowStringOfFlow(testCase)»
		«FOR it : testCase.flows»
			«InitilizeRowData(testCase)»
			«SetFlowToRowData(it)»
			«GetRowStringOfFlow(testCase)»
		«ENDFOR»
		FlowDetails:
		«InitilizeRowData(testCase)»
		«SetTitleToRowData(testCase)»
		«GetRowStringOfFlow(testCase)»
		«FOR it : testCase.flows»
			«InitilizeRowData(testCase)»
			«GetStringOfFlowDetails(testCase, it)»
		«ENDFOR»
	'''

	def SetFlowToRowData(Flow flow) {
		rowData.put("Flow", flow.caption)
		rowData.put(flow.firstClasses.node.caption, flow.firstClasses.equiValenceClass.caption)
		for (it : flow.nextClasses) {
			rowData.put(it.node.caption, it.equiValenceClass.caption)
		}
		rowData.put("Result", flow.result.caption)
	}

	def String GetRowStringOfFlow(TestCase testCase) {
		var rowString = ""
		rowString = rowData.get("Flow") + ","
		for (it : testCase.nodes) {
			rowString = rowString + rowData.get(it.caption) + ","
		}
		rowString = rowString + rowData.get("Result")
		return rowString
	}

	def InitilizeRowData(TestCase testCase) {
		rowData.put("Flow", "")
		rowData.put("Result", "")
		for (it : testCase.nodes) {
			rowData.put(it.caption, "")
		}
	}

	def SetTitleToRowData(TestCase testCase) {
		rowData.put("Flow", "Flow")
		rowData.put("Result", "Result")
		for (it : testCase.nodes) {
			rowData.put(it.caption, it.caption)
		}
	}

	def int GetMaxDataCount(Flow flow) {
		var max = flow.firstClasses.equiValenceClass.data.size
		for (it : flow.nextClasses) {
			if (it.equiValenceClass.data.size > max) {
				max = it.equiValenceClass.data.size
			}
		}
		return max
	}

	def String GetDataOfEquiValenceClass(int index, EquiValenceClass equiValenceClass) {
		return equiValenceClass.data.get(index % equiValenceClass.data.size)
	}

	def String GetStringOfFlowDetails(TestCase testCase, Flow flow) {
		var flowDetailsString = ""
		var max = GetMaxDataCount(flow)
		var index = 0
		while (index < max) {
			InitilizeRowData(testCase)
			rowData.put("Flow", flow.caption + "-" + (index + 1))
			rowData.put(flow.firstClasses.node.caption,
				GetDataOfEquiValenceClass(index, flow.firstClasses.equiValenceClass))
			for (it : flow.nextClasses) {
				rowData.put(it.node.caption, GetDataOfEquiValenceClass(index, it.equiValenceClass))
			}
			rowData.put("Result", flow.result.caption)
			flowDetailsString = flowDetailsString + GetRowStringOfFlow(testCase) + "\n"
			index = index + 1
		}
		return flowDetailsString
	}
}
